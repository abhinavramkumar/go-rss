version: "3.8"

services:
  apis:
    environment:
      - STAGE=${stage}
      - DATABASE_URL=${DATABASE_URL}
    container_name: go-docker-${stage}
    build:
      context: ./
      dockerfile: Dockerfile
    restart: always
    ports:
      - 3333:3333
      - 2345:2345
    volumes:
      - ./:/app
    networks:
      - go-rss-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  postgres:
    image: postgres:15
    container_name: go-rss-db
    restart: always
    hostname: localhost
    ports:
      - 5432:5432
    networks:
      - go-rss-network
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: go_rss
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  pgadmin:
    image: dpage/pgadmin4
    container_name: go-rss-pgadmin
    restart: always
    hostname: localhost
    networks:
      - go-rss-network
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      GUNICORN_ACCESS_LOGFILE: "/dev/null"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./pgadmin-servers.json:/pgadmin4/servers.json

  redis:
    container_name: redis-server
    image: redis:7.0.12-alpine
    networks:
      - go-rss-network
    hostname: localhost
    ports:
      - 6379:6379
    volumes:
      - redis-volume:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5

volumes:
  db-data:
  redis-volume:
networks:
  go-rss-network:
